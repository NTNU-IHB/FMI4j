import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id "cpp-library"
}

if (!project.getProperties().get("skipBuildNative", false)) {

    def os = OperatingSystem.current()
    def javaHome = Jvm.current().javaHome

    library { CppLibrary lib ->

        baseName.set("fmi4j-export")

        targetMachines.set([
                machines.windows.x86_64,
                machines.linux.x86_64,
        ])

        lib.binaries.whenElementFinalized { CppBinary binary ->
            project.dependencies {

                add(binary.runtimeLibraries.name, files("$javaHome/jre/bin/server"))
                add(binary.includePathConfiguration.name, files("$javaHome/include"))

                if (os.isLinux()) {
                    add(binary.includePathConfiguration.name, files("$javaHome/include/linux"))
                    def libjvm = os.getLinkLibraryName("$javaHome/lib/server/jvm")
                    if (!new File(libjvm).exists()) {
                        libjvm = os.getLinkLibraryName("$javaHome/lib/amd64/server/jvm")
                    }
                    Runtime.getRuntime().exec("sh", "-c", "sudo chmod +x $libjvm")
                    add(binary.linkLibraries.name, files(libjvm))
                } else if (os.isWindows()) {
                    add(binary.includePathConfiguration.name, files("$javaHome/include/win32"))
                    add(binary.linkLibraries.name, files(os.getLinkLibraryName("$javaHome/lib/jvm")))
                } else {
                    throw new IllegalStateException("Unsupported OS: " + os.name)
                }

            }

        }

    }

    def assembleAllRelease = []

    tasks.all {
        if (it.name.contains("assembleRelease")) {
            assembleAllRelease.add(it)
        }
    }

    tasks.register("assembleAllRelease")

    tasks.register("copyNativeLibs") {

        doLast {
            copy {

                into "$rootDir/fmu-builder/src/main/resources/binaries/"

                if (os.isLinux()) {
                    into("linux64") {
                        from "$buildDir/lib/main/release/linux"
                        include "*.so"
                    }
                } else if (os.isWindows()) {
                    into("win64") {
                        from "$buildDir/lib/main/release/windows/"
                        include "*.dll"
                    }
                } else {
                    throw new Exception("Unsupported OS: " + os.name)
                }

            }
        }

        group "native"
        dependsOn assembleAllRelease

    }
    
}
